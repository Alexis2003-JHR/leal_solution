// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/domain/ports/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	db "leal/internal/core/domain/models/db"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindActiveCampaign mocks base method.
func (m *MockRepository) FindActiveCampaign(ctx context.Context, branchID int, now time.Time) (*db.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActiveCampaign", ctx, branchID, now)
	ret0, _ := ret[0].(*db.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActiveCampaign indicates an expected call of FindActiveCampaign.
func (mr *MockRepositoryMockRecorder) FindActiveCampaign(ctx, branchID, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActiveCampaign", reflect.TypeOf((*MockRepository)(nil).FindActiveCampaign), ctx, branchID, now)
}

// FindBranch mocks base method.
func (m *MockRepository) FindBranch(ctx context.Context, branchID int) (*db.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBranch", ctx, branchID)
	ret0, _ := ret[0].(*db.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBranch indicates an expected call of FindBranch.
func (mr *MockRepositoryMockRecorder) FindBranch(ctx, branchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBranch", reflect.TypeOf((*MockRepository)(nil).FindBranch), ctx, branchID)
}

// FindConversionFactor mocks base method.
func (m *MockRepository) FindConversionFactor(ctx context.Context, businessTaxID, branchID int) (*db.ConversionFactor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindConversionFactor", ctx, businessTaxID, branchID)
	ret0, _ := ret[0].(*db.ConversionFactor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindConversionFactor indicates an expected call of FindConversionFactor.
func (mr *MockRepositoryMockRecorder) FindConversionFactor(ctx, businessTaxID, branchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindConversionFactor", reflect.TypeOf((*MockRepository)(nil).FindConversionFactor), ctx, businessTaxID, branchID)
}

// GetBranches mocks base method.
func (m *MockRepository) GetBranches(ctx context.Context, taxID int) ([]db.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranches", ctx, taxID)
	ret0, _ := ret[0].([]db.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranches indicates an expected call of GetBranches.
func (mr *MockRepositoryMockRecorder) GetBranches(ctx, taxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranches", reflect.TypeOf((*MockRepository)(nil).GetBranches), ctx, taxID)
}

// GetCampaigns mocks base method.
func (m *MockRepository) GetCampaigns(ctx context.Context, taxID int) ([]db.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaigns", ctx, taxID)
	ret0, _ := ret[0].([]db.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaigns indicates an expected call of GetCampaigns.
func (mr *MockRepositoryMockRecorder) GetCampaigns(ctx, taxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaigns", reflect.TypeOf((*MockRepository)(nil).GetCampaigns), ctx, taxID)
}

// GetReward mocks base method.
func (m *MockRepository) GetReward(ctx context.Context, rewardID int) (db.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReward", ctx, rewardID)
	ret0, _ := ret[0].(db.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReward indicates an expected call of GetReward.
func (mr *MockRepositoryMockRecorder) GetReward(ctx, rewardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReward", reflect.TypeOf((*MockRepository)(nil).GetReward), ctx, rewardID)
}

// GetUserBalance mocks base method.
func (m *MockRepository) GetUserBalance(ctx context.Context, userID int) (db.UserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, userID)
	ret0, _ := ret[0].(db.UserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockRepositoryMockRecorder) GetUserBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockRepository)(nil).GetUserBalance), ctx, userID)
}

// InsertBranch mocks base method.
func (m *MockRepository) InsertBranch(ctx context.Context, business *db.Branch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBranch", ctx, business)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBranch indicates an expected call of InsertBranch.
func (mr *MockRepositoryMockRecorder) InsertBranch(ctx, business interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBranch", reflect.TypeOf((*MockRepository)(nil).InsertBranch), ctx, business)
}

// InsertBusiness mocks base method.
func (m *MockRepository) InsertBusiness(ctx context.Context, business db.Business) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBusiness", ctx, business)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBusiness indicates an expected call of InsertBusiness.
func (mr *MockRepositoryMockRecorder) InsertBusiness(ctx, business interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBusiness", reflect.TypeOf((*MockRepository)(nil).InsertBusiness), ctx, business)
}

// InsertCampaign mocks base method.
func (m *MockRepository) InsertCampaign(ctx context.Context, campaign db.Campaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCampaign", ctx, campaign)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCampaign indicates an expected call of InsertCampaign.
func (mr *MockRepositoryMockRecorder) InsertCampaign(ctx, campaign interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCampaign", reflect.TypeOf((*MockRepository)(nil).InsertCampaign), ctx, campaign)
}

// InsertConversionFactor mocks base method.
func (m *MockRepository) InsertConversionFactor(ctx context.Context, business db.ConversionFactor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertConversionFactor", ctx, business)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertConversionFactor indicates an expected call of InsertConversionFactor.
func (mr *MockRepositoryMockRecorder) InsertConversionFactor(ctx, business interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertConversionFactor", reflect.TypeOf((*MockRepository)(nil).InsertConversionFactor), ctx, business)
}

// InsertRedemption mocks base method.
func (m *MockRepository) InsertRedemption(ctx context.Context, redemption db.Redemption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRedemption", ctx, redemption)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRedemption indicates an expected call of InsertRedemption.
func (mr *MockRepositoryMockRecorder) InsertRedemption(ctx, redemption interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRedemption", reflect.TypeOf((*MockRepository)(nil).InsertRedemption), ctx, redemption)
}

// InsertReward mocks base method.
func (m *MockRepository) InsertReward(ctx context.Context, reward *db.Reward) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertReward", ctx, reward)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertReward indicates an expected call of InsertReward.
func (mr *MockRepositoryMockRecorder) InsertReward(ctx, reward interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertReward", reflect.TypeOf((*MockRepository)(nil).InsertReward), ctx, reward)
}

// InsertUser mocks base method.
func (m *MockRepository) InsertUser(ctx context.Context, user db.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockRepositoryMockRecorder) InsertUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockRepository)(nil).InsertUser), ctx, user)
}

// SaveTransaction mocks base method.
func (m *MockRepository) SaveTransaction(ctx context.Context, tx *db.Transaction, earnings *db.Earnings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTransaction", ctx, tx, earnings)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTransaction indicates an expected call of SaveTransaction.
func (mr *MockRepositoryMockRecorder) SaveTransaction(ctx, tx, earnings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTransaction", reflect.TypeOf((*MockRepository)(nil).SaveTransaction), ctx, tx, earnings)
}

// UpdateUserBalance mocks base method.
func (m *MockRepository) UpdateUserBalance(ctx context.Context, userID, points int, cashback float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserBalance", ctx, userID, points, cashback)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserBalance indicates an expected call of UpdateUserBalance.
func (mr *MockRepositoryMockRecorder) UpdateUserBalance(ctx, userID, points, cashback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserBalance", reflect.TypeOf((*MockRepository)(nil).UpdateUserBalance), ctx, userID, points, cashback)
}

// UpdateUserRedeemPoints mocks base method.
func (m *MockRepository) UpdateUserRedeemPoints(ctx context.Context, userID, points int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRedeemPoints", ctx, userID, points)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserRedeemPoints indicates an expected call of UpdateUserRedeemPoints.
func (mr *MockRepositoryMockRecorder) UpdateUserRedeemPoints(ctx, userID, points interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRedeemPoints", reflect.TypeOf((*MockRepository)(nil).UpdateUserRedeemPoints), ctx, userID, points)
}
